<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jaequery]]></title>
  <link href="http://jaequery.github.com/atom.xml" rel="self"/>
  <link href="http://jaequery.github.com/"/>
  <updated>2013-02-03T21:28:53-08:00</updated>
  <id>http://jaequery.github.com/</id>
  <author>
    <name><![CDATA[jaequery]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby is strange and odd]]></title>
    <link href="http://jaequery.github.com/blog/2013/02/03/ruby-is-strange-and-odd/"/>
    <updated>2013-02-03T19:08:00-08:00</updated>
    <id>http://jaequery.github.com/blog/2013/02/03/ruby-is-strange-and-odd</id>
    <content type="html"><![CDATA[<h3>Day 2 of Ruby</h3>

<p>It&#8217;s strange and I and confused by all these weird syntaxes.</p>

<p>Coming from PHP, I assumed at first glance:</p>

<pre><code>   @name (ruby) is $name (php)
</code></pre>

<p>But no, because in ruby, you have several different ways of assigning a variable.</p>

<p>There are:</p>

<ul>
<li>@name (instance var)</li>
<li>@@name (class var)</li>
<li>name (method var)</li>
</ul>


<p>Not to mention, &#8220;symbols&#8221; which really threw me off guard.</p>

<p>Anyhow, here is what I found out.</p>

<h5>@name (instance var)</h5>

<p>Instance vars are similar to $this->name in php.
So @name = $this->name.</p>

<h5>@@name (class var)</h5>

<p>Now this one is a bit tricky. Class vars probably won&#8217;t ring a bell to PHP developer as in PHP, class vars are like instance vars. However in Ruby, @@name is similar to static vars.</p>

<p>The reason why it&#8217;s that is because if you have 3-4+ instances of a class, @@name is shared by all of them. Somewhat of a singleton variable.</p>

<h5>name (method var)</h5>

<p>This is pretty straight forward. It&#8217;s a var that only lives inside a method. Good for throwaway/temporary variables, such as res, total, etc &#8230;</p>

<h5>:name (symbols)</h5>

<p>Before learning ruby, I thought this was ruby&#8217;s way of PHP&#8217;s $ sign. Every ruby code I see online had some :symbols and I thought ruby would be a walk in the park as long as I think to myself that is PHP&#8217;s equivalent of assigning variables. But no, it&#8217;s probably what threw me off the most.</p>

<p>You see, :symbols aren&#8217;t something you can assign to. It&#8217;s not a variable, it&#8217;s a reference. Or, atleast that&#8217;s what other ruby devs told me on freenode. I still didn&#8217;t undersetand, so is this like a pointer reference I asked? And they said no. After about an hour of chatting back and forth, I came to conclusion from bits and pieces of evidence that :symbols are only used inside hashes as keys.</p>

<p>So in php land:</p>

<pre><code>$users = array(
    "name" =&gt; "john",
    "name" =&gt; "mark",
)

foreach($users AS $user){
    echo $user['name'];
}
</code></pre>

<p>But in ruby land, it&#8217;s:</p>

<pre><code>users = {
    :name =&gt; "john",
    :name =&gt; "mark",
}

users.each do |user|
    puts user.name
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[switching from PHP to RoR]]></title>
    <link href="http://jaequery.github.com/blog/2013/02/01/switching-from-php-to-ror/"/>
    <updated>2013-02-01T19:07:00-08:00</updated>
    <id>http://jaequery.github.com/blog/2013/02/01/switching-from-php-to-ror</id>
    <content type="html"><![CDATA[<p>In one unlikely evening, I was bored and just felt like doing something new, I did something I probably never thought I&#8217;d do. Jump into RoR.
I say unlikely because those that knows me, knows how much of a PHP advocate I am. Afterall, I didn&#8217;t spend 10+ years on it for nothing.
I&#8217;m also not the type to stop on something until I&#8217;ve mastered it. I suddenly now have quite a challenge on my hands.</p>
]]></content>
  </entry>
  
</feed>
